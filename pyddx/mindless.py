import pyddx
import numpy as np

tobohr = 1 / 0.52917721092

charges = np.array([
    7.38394711236234E-2, -1.68354976558608E-1, -3.47642833746823E-1,
    -7.05489267186003E-1, 7.73548301641266E-1, 2.30207581365386E-1,
    1.02748501676354E-1, 9.47818107467040E-2, 2.44260351729187E-2,
    2.34984927037408E-1, -3.17839896393030E-1, 6.67112994818879E-1,
    -4.78119977010488E-1, 6.57536027459275E-2, 1.08259054549882E-1,
    -3.58215329983396E-1
])


rvdw = np.array([
    4.1573974741649691, 2.4566439620065728, 3.2503289343471575, 3.8701591032226621,
    2.4566439620065728, 3.8701591032226621, 2.4566439620065728, 4.1573974741649691,
    3.0953713921282811, 2.4566439620065728, 3.8701591032226621, 3.0953713921282811,
    2.4566439620065728, 2.4566439620065728, 4.0685803463078081, 2.9668700156540915
])

centres = tobohr * np.array([
[2.35657681818464,   1.56413352120650,   0.15633191455554],
[3.73917059667152,   4.62925085487901,  -2.78650603123275],
[3.14560604851984,   2.89719360409943,  -2.78417514965298],
[0.77007531623341,   2.61211360015145,   2.33311615406392],
[0.66443402867749,   4.05997385957096,   4.06971059462416],
[1.35794144684175,  -3.75758532634922,  -0.38278945412140],
[2.23158951954857,   3.52161941806966,   0.71501793840421],
[1.21528967345105,  -1.22312093897026,   3.34968237398899],
[2.91125704119979,   0.39569409719795,  -1.08361131016514],
[1.52127986148665,  -5.83354834109118,   0.65117354687277],
[0.96426075166446,  -1.73395662042913,  -0.29756953994186],
[1.76477233718293,  -5.12961800838251,   2.54274889905822],
[2.66597958259665,   1.28123105561800,  -4.29750060549502],
[3.13008195341572,  -3.60405914945209,  -1.88201177072058],
[3.70343741730607,  -0.47466561516456,   4.15636571641078],
[0.79410445392162,   0.79534398904606,  -4.45998327664881],
]).T

print(pyddx.banner())

model = pyddx.Model("cosmo", centres, rvdw, solvent_epsilon=78.0, n_lebedev=302, eta=0.1, lmax=1)

# Compute solute contributions (here just charges)
solute_multipoles = charges.reshape(1, -1) / np.sqrt(4 * np.pi)
solute_field = model.multipole_electrostatics(solute_multipoles)
solute_psi = model.multipole_psi(solute_multipoles)

#print(f'solute_psi: {solute_psi}')
# Solve the problem
state = pyddx.State(model, solute_psi, solute_field["phi"])
state.fill_guess()
state.solve()
state.fill_guess_adjoint()
state.solve_adjoint()

# Show results
keps = 0.98097895003804214 # COSMO water
#keps = 1.00000000000000000 #PCM
energy = keps * 0.5000000000000 * np.sum(state.x * solute_psi)
force = keps * state.solvation_force_terms(solute_field)
#force +=  state.multipole_force_terms(solute_multipoles)
print(energy)
print(force)
#print(f'xs: {state.x}')
